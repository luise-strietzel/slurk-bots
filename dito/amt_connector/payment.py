import os
import glob
import json
import xmltodict
import aws_config
from openpyxl import Workbook, load_workbook
import configparser

TOTAL_BONUS=0

# --- class implementation --------------------------------------------------------------------------------------------
# Payment
# ---------------------------------------------------------------------------------------------------------------------
class Payment:
    """ Payment Module for doing the HIT Payments.

    This class provides the code to pay all turkers given a set of log-files from the publish_hits.py an a
    token evaluation via the Evaluation class in evaluation.py
    There are two functions available: pay_hits() and pay_bonus().
    pay_hits() checks all tokens and pay the normal HIT-price (e. g. 10 ct.).
    pay_bonus() checks additional evaluation information to pay the bonus.

    Args:
        mturk_session   A string. Folder name of the current HIT-Session. The 'results.json' and the log-file
                        need to be in the './results/mturk_session/' and './published/mturk_session/' locations.

    """
    def __init__(self, mturk_session):
        self.path_evaluation = "./results/" + mturk_session + "/"
        self.path_published = "./published/" + mturk_session + "/"
        self.path_payment_log = "./results/" + mturk_session + "/payment_log.txt"
        self.path_payment_log_excel = "./results/" + mturk_session + "/payment_log.xlsx"
        self.tokens = []
        self.evaluation_info = []
        self.mturk = aws_config.ConnectToMTurk().mturk

# --- public functions ------------------------------------------------------------------------------------------------
    def pay_hits(self):
        """ Pays turker based on log-files and results.py"""

        # Load and check the files
        files = self._load_data()

        print("Start paying the normal payments ...")

        # Go through all logs from the files (publish_hits.py) and pay
        self._load_assignments_and_pay(files=files, pay_bonus=False)

    def pay_bonus(self):
        """ Pays bonus payment for the turkers based on log-files and results.py"""

        # Load and check the files
        files = self._load_data()

        print("Start paying bonus payments ...")

        # Go through all logs from the files (publish_hits.py) and pay
        self._load_assignments_and_pay(files=files, pay_bonus=True)

# --- private functions -----------------------------------------------------------------------------------------------
    def _load_data(self):
        """ Loads all data and check if available.

        This function loads the log files from the published_hits.py and the results.json.
        It also checks, if the data is available and otherwise stops the payment.

        Returns:
            files   A list of strings. The log files.
        """

        # Get all log files from the actual mturk session, generated by publish_hits.py.
        files = glob.glob(os.path.join(self.path_published, '*.json'))

        # Check if published data is available.
        # This prevents the script from accidentally rejecting hits, if the log data is not in the correct place.
        if len(files) == 0:
            print("WARNING: No Log-Files in '" + self.path_published + "' Payment has stopped!")
            return

        # Check if tokens were evaluated and load if that is true.
        # Prevents the script from accidentally rejecting hits, if the slack-logs are not evaluated before.
        if not os.path.isfile(os.path.join(self.path_evaluation, "results.json")):
            print("WARNING: No Evaluation done. Payment has stopped!")
            return
        else:
            with open(os.path.join(self.path_evaluation, "results.json")) as file:
                json_content = json.load(file)
                self.tokens = json_content['tokens']
                self.evaluation_info = json_content['evaluation_info']

        return files

    def _load_assignments_and_pay(self, files, pay_bonus):
        """ Loads the assignments from mturk and pays.

        This function takes the log files from published_hits.py and pays the turker.
        If 'pay_bonus' is True, only bonus payment will be done. If it is False, then only the
        normal paying is done.

        Args:
            files       A list of strings. The files with the HIT-Ids.
            pay_bonus   A boolean. Whether the bonus payment should payed or not.
        """
        for file in files:
            with open(file, 'r') as f:
                published_hits = json.load(f)

                # Go through all hits in the current log
                for published_hit in published_hits:
                    # I think this is not needed in this script.
                    # hit = aws_config.ConnectToMTurk.mturk.get_hit(HITId=published_hit['hit_id'])

                    # Ask for all assignments via the boto3 client for the given HIT-Id.
                    try:
                        assignments_from_mturk = self.mturk.list_assignments_for_hit(
                            HITId=published_hit['hit_id'],
                            AssignmentStatuses=['Submitted', 'Approved', 'Rejected'],
                            MaxResults=10
                        )
                        assignments = assignments_from_mturk['Assignments']
                    except Exception as e:
                        print(e)
                        assignments = []

                    # Skip if no assignments are found for the given HIT-Id
                    if len(assignments) == 0:
                        print("No Assignments for hit_id: " + str(published_hit['hit_id']))
                    else:
                        # Go through all assignments. This loop has length 1 normally.
                        for assignment in assignments:
                            # Get the answer from the turker. This should contain the token.
                            answer_dict = xmltodict.parse(assignment['Answer'])
                            answer = answer_dict['QuestionFormAnswers']['Answer'][0]['FreeText']
                            feedback = answer_dict['QuestionFormAnswers']['Answer'][1]['FreeText']

                            # Check if assignment is submitted, approved or rejected.
                            # Only pay if the assignment is submitted. This prevents from double paying.
                            if assignment['AssignmentStatus'] == 'Submitted' and not pay_bonus:
                                # Check the token
                                approved, result = self._check_token_and_pay(answer=answer,
                                                                     assignmentId=assignment['AssignmentId'])
                                print("The HIT with hit_id: " + str(published_hit['hit_id']))
                                if approved:
                                    print("has been approved.")
                                else:
                                    print("has been ignored/rejected.")
                                self._log_update(hit_id=published_hit['hit_id'],
                                                 correct_token="ABCDEFGHIJ",
                                                 submitted_token=answer,
                                                 type_token=result,
                                                 feedback=feedback)

                            elif assignment['AssignmentStatus'] == 'Approved':
                                if not pay_bonus:
                                    print("The HIT with hit_id: " + str(published_hit['hit_id']) + " is already approved.")
                                else:
                                    success, result = self._check_token_and_pay_bonus(answer=answer,
                                                                                      assignment=assignment)
                                    if success:
                                        self._log_update(hit_id=published_hit['hit_id'],
                                                         correct_token="ABCDEFGHIJ",
                                                         submitted_token=answer,
                                                         type_token=result,
                                                         feedback=feedback)
                            elif not pay_bonus:
                                print("The HIT with hit_id: " + str(published_hit['hit_id']) + " is already ignored.")

    def _check_token_and_pay(self, answer, assignmentId):
        """ Checks a token and return a boolean, if it's correct.

        Checks a given token with all evaluation information and pay the turker, if the token is correct.
        This function pays only the base price. But it will inform the turker, that he will get bonus payment
        as soon as possible.

        Args:
            answer          A string. Should contain the token, submitted from the turker.
            assignmentId    A string. The Assignment ID from the HIT.

        """
        print(answer)
        valid_token = False
        result = ""

        if answer is None:
            # If the turker has sent an empty string, the HIT gives them waiting room money.
            self.mturk.approve_assignment(
                AssignmentId=assignmentId,
                RequesterFeedback='Thank you, and better luck next time.',
                OverrideRejection=False
            )
            result = "No answer provided"
            return True, result
        # Go through all valid tokens, collected via the evaluation.py script.
        for evaluation_info in self.evaluation_info:
            # If a correct is found ...
            if evaluation_info['token'] == answer:
                valid_token = True
                # ... check if it's a waiting room token and pay
                if evaluation_info['info'] == "waiting_room":
                    self.mturk.approve_assignment(
                        AssignmentId=assignmentId,
                        RequesterFeedback='Thank you, and better luck next time ;)',
                        OverrideRejection=False
                    )
                    result = "Waiting Room"
                    return True, result
                # ... check if it's a chat room token and pay.
                elif evaluation_info['info'] == "chat_room":
                    self.mturk.approve_assignment(
                        AssignmentId=assignmentId,
                        RequesterFeedback='Thank you for chatting. '
                                          'We will check for bonus payment as soon as possible!',
                        OverrideRejection=False
                    )
                    result = "Chat Room"
                    return True, result
                elif evaluation_info['info'] == "no_reply_pay":
                    # Approve HIT if partner leaves
                    self.mturk.approve_assignment(
                        AssignmentId=assignmentId,
                        RequesterFeedback='Thank you for chatting. Sorry that your partner did not reply.'
                                          'We will check the log and pay a bonus as fair as possible to you!',
                        OverrideRejection=False
                    )
                    result = "No Reply"
                    return True, result
                elif evaluation_info['info'] == "no_reply_no_pay":
                    # Approve HIT if partner leaves
                    self.mturk.approve_assignment(
                        AssignmentId=assignmentId,
                        RequesterFeedback='Thank you for chatting. Sorry that your partner did not reply.',
                        OverrideRejection=False
                    )
                    result = "No Reply"
                    return True, result
        if not valid_token:
            print("Not a real token! Rejection is deactivated right now!")
            return False, result

        # debug only. If this line is reached, something in the function is wrong
        print("WARNING! HIT WAS NOT APPROVED")
        print("The following print about rejecting is wrong!")
        return False

    def _check_token_and_pay_bonus(self, answer, assignment):
        global TOTAL_BONUS
        result = ""
        for evaluation_info in self.evaluation_info:
            if evaluation_info['token'] == answer:
                if evaluation_info['info'] == "chat_room":
                    time_limit_reached = False
                    utterance_limit_reached = False
                    time_bonus = (evaluation_info['duration'] / 60.0) * 0.14
                    if time_bonus > 0.56:
                        time_bonus = 0.56
                        time_limit_reached = True
                    if evaluation_info['turns'] >= 8:
                        utterance_limit_reached = True
                    if time_limit_reached and utterance_limit_reached:
                        bonus = time_bonus + 0.10
                    else:
                        bonus = time_bonus
                    try:
                        self.mturk.send_bonus(
                           WorkerId=assignment['WorkerId'],
                           BonusAmount=str(round(bonus, 2)),
                           AssignmentId=assignment['AssignmentId'],
                           Reason='Thank you for chatting! This is your bonus payment\
                            for the actual participation ;)',
                           UniqueRequestToken=f'{assignment["AssignmentId"]}'
                           )
                        print("Bonus payed for " + str(assignment['AssignmentId']) + " and Token " + str(answer))
                        print("The amount was " + str(bonus) + " ct.")
                        result = "BP: " + str(round(bonus, 2)) + " ct."
                        TOTAL_BONUS += bonus
                    except Exception as e:
                        print(e)
                        return False, result
                    return True, result
                elif evaluation_info['info'] == "no_reply_no_pay":
                    try:
                        self.mturk.send_bonus(
                           WorkerId=assignment['WorkerId'],
                           BonusAmount=str(0.10),
                           AssignmentId=assignment['AssignmentId'],
                           Reason='Sorry that your partner has not replied. Here is a bonus for the additional time, '
                                  'you had to wait. Thank you! :-)',
                           UniqueRequestToken=f'{assignment["AssignmentId"]}'
                           )
                        print("Bonus payed for " + str(assignment['AssignmentId']) + " and Token " + str(answer))
                        print("The amount was 10 ct. (No Reply)")
                        result = "BP: 10 ct (NR)."
                        TOTAL_BONUS += 0.10
                    except Exception as e:
                        print(e)
                        return False, result
                    return True, result
                elif evaluation_info['info'] == "no_reply_pay":
                    time_bonus = (evaluation_info['duration'] / 60.0) * 0.14
                    if time_bonus > 0.56:
                        time_bonus = 0.56
                    try:
                        self.mturk.send_bonus(
                           WorkerId=assignment['WorkerId'],
                           BonusAmount=str(round(time_bonus, 2)),
                           AssignmentId=assignment['AssignmentId'],
                           Reason='Thank you for chatting! Here is your bonus-payment based an the time you spent '
                                  'chatting. Sorry that your partner did not finished the task with you.',
                           UniqueRequestToken=f'{assignment["AssignmentId"]}'
                           )
                        print("Bonus payed for " + str(assignment['AssignmentId']) + " and Token " + str(answer))
                        print("The amount was " + str(time_bonus) + " ct. (Not finished, because of partner left.")
                        result = "BP: " + str(round(time_bonus, 2)) + " ct. (NR-PL)"
                        TOTAL_BONUS += time_bonus
                    except Exception as e:
                        print(e)
                        return False, result
                    return True, result
        return False, result

    def _log_update(self, hit_id, correct_token, submitted_token, type_token, feedback):
        """ Logs the payment """
        if not os.path.isfile(self.path_payment_log):
            with open(self.path_payment_log, 'w') as log:
                log.write("HitId\t\tTrue Token\tWorker sent\tTask\tFeedback\n")
            wb = Workbook()
            ws = wb.active
            ws.append(["HitID", "True Token", "Worker sent", "Task", "Feedback"])
            wb.save(self.path_payment_log_excel)
        with open(self.path_payment_log, 'a') as log:
            log.write(hit_id + "\t" + str(correct_token) + "\t" + str(submitted_token) + "\t" + str(type_token) + "\t" + str(feedback) + "\n")
        wb = load_workbook(self.path_payment_log_excel)
        ws = wb.active
        if hit_id == "":
            hit_id = "None"
        if correct_token == "":
            correct_token = "None"
        if submitted_token == "":
            submitted_token = "None"
        if type_token == "":
            type_token = "None"
        if feedback == "":
            feedback = "None"
        ws.append([hit_id, correct_token, submitted_token, type_token, feedback])
        wb.save(self.path_payment_log_excel)


if __name__ == '__main__':
    CONFIG = configparser.ConfigParser()
    CONFIG.read('config.ini')
    SESSION = CONFIG['session']['name']
    pay_module = Payment(SESSION)
    pay_module.pay_hits()
    print(TOTAL_BONUS)
    pay_module.pay_bonus()
